var documenterSearchIndex = {"docs":
[{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/master/docs/lit/examples/8-shepp.jl\"","category":"page"},{"location":"examples/8-shepp/#shepp","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This page illustrates the Shepp-Logan phantoms in the Julia package ImagePhantoms.","category":"page"},{"location":"examples/8-shepp/#Setup","page":"Shepp-Logan Phantoms","title":"Setup","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"Packages needed here.","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"using ImagePhantoms\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"examples/8-shepp/#Overview","page":"Shepp-Logan Phantoms","title":"Overview","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"There are several variations of the Shepp-Logan phantom available.","category":"page"},{"location":"examples/8-shepp/#CT-version","page":"Shepp-Logan Phantoms","title":"CT version","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"Original version from: Larry A Shepp, Benjamin F Logan, \"The Fourier reconstruction of a head section,\" IEEE Transactions on Nuclear Science, 21(3):21-42, June 1974. doi","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This (default) version has low soft tissue contrast, so it usually should be displayed with a narrow window the using clim option:","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image1 = shepp_logan(256) # CT version by default\njim(image1, \"SheppLogan (original CT version)\", clim=(0.95, 1.05))","category":"page"},{"location":"examples/8-shepp/#Over-sampling","page":"Shepp-Logan Phantoms","title":"Over-sampling","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"When generating ellipse phantoms, it is generally preferable to \"over-sample\" the ellipse values within each pixel to account for partial volume effect. A factor of 3 over-sampling (along both axes) typically suffices, so this factor is the default for the shepp_logan method. Here is how the phantom image looks without over-sampling:","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image1o = shepp_logan(256; oversample=1)\njim(image1o, \"No over sampling\", clim=(0.95,1.05))","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"Notice that boundaries of the interior ellipses look smoother in the original version with the default 3× over-sampling. Most of the remaining examples use the recommended default over-sampling.","category":"page"},{"location":"examples/8-shepp/#Toft-version","page":"Shepp-Logan Phantoms","title":"Toft version","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This version is from: Toft, Peter Aundal & Sørensen, John Aasted \"The Radon transform-theory and implementation,\" Technical University of Denmark (DTU), 1996. Page 201. pdf","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image2 = shepp_logan(256, SheppLoganToft())\njim(image2, \"SheppLoganToft\")","category":"page"},{"location":"examples/8-shepp/#Emission-tomography-version","page":"Shepp-Logan Phantoms","title":"Emission tomography version","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This version has low intensity for the skull because typical PET/SPECT radiotracers do not accumulate in bone regions. It is probably also useful for MRI, because typical MRI scans have low signal from bone.","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image3 = shepp_logan(256, SheppLoganEmis())\njim(image3, \"SheppLoganEmis\")","category":"page"},{"location":"examples/8-shepp/#BrainWeb-version","page":"Shepp-Logan Phantoms","title":"BrainWeb version","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This version was inspired by the BrainWeb phantoms that have integer indices for each of the different regions. It should not be used directly, but rather one should assign meaningful intensity values to each of the integer indices.","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image4 = shepp_logan(256, SheppLoganBrainWeb())\njim(image4, \"SheppLoganBrainWeb\")","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"For the BrainWeb version, there is no over-sampling by default, to preserve the integer indices.","category":"page"},{"location":"examples/8-shepp/#Comedy-version","page":"Shepp-Logan Phantoms","title":"Comedy version","text":"","category":"section"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"image5 = shepp_logan(256, SouthPark(); fovs=(1,1))\njim(image5, \"SouthPark\")","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"","category":"page"},{"location":"examples/8-shepp/","page":"Shepp-Logan Phantoms","title":"Shepp-Logan Phantoms","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/master/docs/lit/examples/9-disk.jl\"","category":"page"},{"location":"examples/9-disk/#disk","page":"Random Disks","title":"Random Disks","text":"","category":"section"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"This page illustrates the disk_phantom_params method in the Julia package ImagePhantoms.","category":"page"},{"location":"examples/9-disk/#Setup","page":"Random Disks","title":"Setup","text":"","category":"section"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"Packages needed here.","category":"page"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"using ImagePhantoms: Ellipse, phantom, disk_phantom_params\nusing ImageGeoms: ImageGeom\nusing MIRTjim: jim, prompt\nusing Plots # @animate, gif\n#plot, plot!, scatter!, default; default(markerstrokecolor=:auto)","category":"page"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"examples/9-disk/#Overview","page":"Random Disks","title":"Overview","text":"","category":"section"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"For training machine-learning methods for image reconstruction, it can be helpful to have a way to generate a family of phantoms drawn from some common distribution, especially for debugging or when real ground-truth data is limited. The disk_phantom_params function is one example of how one can use the tools in this package to generate such phantoms.","category":"page"},{"location":"examples/9-disk/#A-single-disk-phantom-image","page":"Random Disks","title":"A single disk phantom image","text":"","category":"section"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"Make a digital image of it using phantom and display it.","category":"page"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"function disk_phantom(title::String)\n    (dx,dy) = (1, 1)\n    (M,N) = (2^8,2^8)\n    x = (-M÷2:M÷2-1) * dx\n    y = (-N÷2:N÷2-1) * dy\n    params = disk_phantom_params( ; rhead = () -> rand(100:105))\n    objects = Ellipse(params) # vector of Ellipse objects\n    oversample = 3\n    img = phantom(x, y, objects, oversample)\n    jim(x, y, img; title, clim=(0,1300))\nend\ndisk_phantom(\"A single disk phantom realization\")","category":"page"},{"location":"examples/9-disk/#Several-realizations","page":"Random Disks","title":"Several realizations","text":"","category":"section"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"anim = @animate for i in 1:8\n    disk_phantom(\"Realization $i\")\nend\ngif(anim, \"disk.gif\", fps = 6)","category":"page"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"","category":"page"},{"location":"examples/9-disk/","page":"Random Disks","title":"Random Disks","text":"This page was generated using Literate.jl.","category":"page"},{"location":"methods/#Methods-list","page":"Methods","title":"Methods list","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"","category":"page"},{"location":"methods/#Methods-usage","page":"Methods","title":"Methods usage","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"Modules = [ImagePhantoms]","category":"page"},{"location":"methods/#ImagePhantoms.AbstractShape","page":"Methods","title":"ImagePhantoms.AbstractShape","text":"AbstractShape\n\nGeneric shape type for ImagePhantoms.\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.AbstractShape2","page":"Methods","title":"ImagePhantoms.AbstractShape2","text":"AbstractShape2 <: AbstractShape\n\nGeneric 2D shape type (with subtypes Ellipse...)\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.AbstractShape3","page":"Methods","title":"ImagePhantoms.AbstractShape3","text":"AbstractShape2 <: AbstractShape\n\nGeneric 3D shape type (with subtypes Ellipsoid...)\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Ellipse","page":"Methods","title":"ImagePhantoms.Ellipse","text":"Ellipse <: AbstractShape2\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Ellipse-2","page":"Methods","title":"ImagePhantoms.Ellipse","text":"Ellipse(cx, cy, rx, ry, ϕ, value::Number)\nEllipse(center::NTuple{2,RealU}, radii::NTuple{2,RealU}, ϕ::RealU, v)\nEllipse([6-vector])\nEllipse(r, v=1) (circle of radius `r`)\n\nConstruct Ellipse object from parameters\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Ellipse-Tuple{AbstractMatrix{var\"#s29\"} where var\"#s29\"<:Number}","page":"Methods","title":"ImagePhantoms.Ellipse","text":"phantom = Ellipse(n × 6 AbstractMatrix)\n\nReturn vector of Ellipse objects, one for each row of input matrix.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.EllipsePhantomVersion","page":"Methods","title":"ImagePhantoms.EllipsePhantomVersion","text":"EllipsePhantomVersion\n\nParent type for different versions of ellipse phantoms:\n\nSheppLogan original CT version from Shepp&Logan paper\nSheppLoganEmis higher contrast version suitable for emission tomography\nSheppLoganBrainWeb integer index version based on brainweb\nSheppLoganToft higher contrast version from Toft, 1996\nSouthPark for fun\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Gauss2","page":"Methods","title":"ImagePhantoms.Gauss2","text":"Gauss2 <: AbstractShape2\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Gauss2-2","page":"Methods","title":"ImagePhantoms.Gauss2","text":"Gauss2(cx, cy, wx, wy, ϕ, value::Number)\nGauss2(center::NTuple{2,RealU}, width::NTuple{2,RealU}, ϕ::RealU, v)\nGauss2([6-vector])\nGauss2(r, v=1) (square of radius `r`)\n\nConstruct Gauss2 object from parameters; here width = FWHM (full-width at half-maximum)\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Object","page":"Methods","title":"ImagePhantoms.Object","text":"Object{S, D, V, ...}(center, width, angle, value, param) <: AbstractObject\n\nGeneral container for 2D and 3D objects for defining image phantoms.\n\ncenter::NTuple{D,C} coordinates of \"center\" of this object\nwidth::NTuple{W,C} \"width\" along axis; usually W=D or W=1 (e.g., FWHM for Gauss, radii for Ellipse, radius of Circle)\nangle::NTuple{D-1,A} angle of x' axis relative to x axis, in radians (or with units)\nvalue::V \"intensity\" value for this object\nparam optional additional shape parameters (often nothing)\n\nExample\n\njulia> Object(Ellipse(), (0,0), (1,2), 0.0, 1//2, nothing)\nObject2d{Ellipse, Rational{Int64}, 2, Int64, Float64, Nothing} (S, D, V, ...)\n shape::Ellipse Ellipse()\n center::Tuple{Int64, Int64} (0, 0)\n width::Tuple{Int64, Int64} (1, 2)\n angle::Tuple{Float64} (0.0,)\n value::Rational{Int64} 1//2\n param::Nothing nothing\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{AbstractShape2}, Tuple{C}} where C<:Number","page":"Methods","title":"ImagePhantoms.Object","text":"ob = Object(shape ; center=(0,0), width=(1,1), angle=0, value=1, param=nothing)\n\n2D object constructor using keywords.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{AbstractShape3}, Tuple{C}, Tuple{W}} where {W, C<:Number}","page":"Methods","title":"ImagePhantoms.Object","text":"ob = Object(shape ; center=(0,0,0), width=(1,1,1), angle=(0,0), value=1, param=nothing)\n\n3D object constructor using keywords.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{C}, Tuple{AbstractShape2, Tuple{C, C}, Tuple{Vararg{C, W}} where W}, Tuple{AbstractShape2, Tuple{C, C}, Tuple{Vararg{C, W}} where W, Number}, Tuple{AbstractShape2, Tuple{C, C}, Tuple{Vararg{C, W}} where W, Number, Number}, Tuple{AbstractShape2, Tuple{C, C}, Tuple{Vararg{C, W}} where W, Number, Number, Any}} where C<:Number","page":"Methods","title":"ImagePhantoms.Object","text":"ob = Object(shape, center, width, angle=0, value=1, param=nothing)\n\n2D object constructor.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object-Union{Tuple{C}, Tuple{D}, Tuple{S}, Tuple{S, Tuple{Vararg{C, D}}}, Tuple{S, Tuple{Vararg{C, D}}, Tuple{Vararg{C, W}} where W}, Tuple{S, Tuple{Vararg{C, D}}, Tuple{Vararg{C, W}} where W, Tuple{Vararg{Number, Da}} where Da}, Tuple{S, Tuple{Vararg{C, D}}, Tuple{Vararg{C, W}} where W, Tuple{Vararg{Number, Da}} where Da, Number}, Tuple{S, Tuple{Vararg{C, D}}, Tuple{Vararg{C, W}} where W, Tuple{Vararg{Number, Da}} where Da, Number, Any}} where {S<:AbstractShape, D, C<:Number}","page":"Methods","title":"ImagePhantoms.Object","text":"ob = Object(shape, center, width, angle, value, param)\n\nGeneral outer object constructor where angle is a tuple, including 3D case.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Object2d","page":"Methods","title":"ImagePhantoms.Object2d","text":"Object2d = Object{S,2} where S <: AbstractObject\n\nFor 2D objects\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Object3d","page":"Methods","title":"ImagePhantoms.Object3d","text":"Object3d = Object{S,3} where S <: AbstractObject\n\nFor 3D objects\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Rect","page":"Methods","title":"ImagePhantoms.Rect","text":"Rect <: AbstractShape2\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.Rect-2","page":"Methods","title":"ImagePhantoms.Rect","text":"Rect(cx, cy, wx, wy, ϕ, value::Number)\nRect(center::NTuple{2,RealU}, width::NTuple{2,RealU}, ϕ::RealU, v)\nRect([6-vector])\nRect(r, v=1) (square of radius `r`)\n\nConstruct Rect object from parameters; here width is the full-width.\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.SheppLogan","page":"Methods","title":"ImagePhantoms.SheppLogan","text":"SheppLogan\n\nOriginal version from : Larry A Shepp, Benjamin F Logan, \"The Fourier reconstruction of a head section,\" IEEE Transactions on Nuclear Science, 21(3):21-42, June 1974. doi\n\nAlso in Kak and Slaney 1988 text, p. 255. doi\n\n\n\n\n\n","category":"type"},{"location":"methods/#ImagePhantoms.SheppLoganToft","page":"Methods","title":"ImagePhantoms.SheppLoganToft","text":"SheppLoganToft\n\nToft, Peter Aundal & Sørensen, John Aasted \"The Radon transform-theory and implementation,\" Technical University of Denmark (DTU), 1996. Page 201. https://files.openpdfs.org/1ra51GP6gJO.pdf\n\n\n\n\n\n","category":"type"},{"location":"methods/#Base.:*-Tuple{AbstractObject, Number}","page":"Methods","title":"Base.:*","text":"(*)(ob::Object, x::Number)\n(*)(x::Number, ob::Object)\n\nScale object value by x.\n\n\n\n\n\n","category":"method"},{"location":"methods/#Base.show-Union{Tuple{D}, Tuple{S}, Tuple{IO, MIME{Symbol(\"text/plain\")}, Object{S, D, V, W, C, A, P} where {V, W, C, A, P}}} where {S, D}","page":"Methods","title":"Base.show","text":"show(io::IO, ::MIME\"text/plain\", ob::Object)\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.Circle","page":"Methods","title":"ImagePhantoms.Circle","text":"Circle(x,y,r,v=1) (circle of radius `r` centered at `(x,y)`)\nCircle((x,y), r, v=1) ditto\nCircle([4-vector]) ditto\nCircle(r, v=1) centered at origin\n\nConstruct circle objects as special cases of Ellipse objects.\n\n\n\n\n\n","category":"function"},{"location":"methods/#ImagePhantoms.Square","page":"Methods","title":"ImagePhantoms.Square","text":"Square(x,y,w,v=1) (square of width `w` centered at `(x,y)`)\nSquare((x,y), w, v=1) ditto\nSquare([4-vector]) ditto\nSquare(w, v=1) centered at origin\n\nConstruct Square objects as special cases of Rect objects.\n\n\n\n\n\n","category":"function"},{"location":"methods/#ImagePhantoms.coords-Tuple{Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}, Number, Number}","page":"Methods","title":"ImagePhantoms.coords","text":"coords(object::Object2d, x::RealU, y::RealU)\n\nPut coordinates (x,y) in canonical axes associated with object.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.disk_phantom_params-Tuple{}","page":"Methods","title":"ImagePhantoms.disk_phantom_params","text":"params = disk_phantom_params( ; ...)\n\nGenerate ndisk × 6 ellipse phantom parameters for a head-sized disk plus many disks within it, designed so that the disks have some minimum separation minsep to avoid overlap and to simplify patch-based model fitting.\n\nOptions\n\nfov::Real = 240 image field of view in mm\nrhead::Function = () -> 100 background radius for \"head\" [mm]\nmuhead::Function = () -> 1000 \"μ\" (intensity) value for background head disk\nrdisk::Function = () -> 10 + 10 * rand() random disk radii [10,20]\nmudisk::Function = () -> 100 + 200 * rand() \"μ\" values for disks [100,300]\nndisk::Function = () -> 10 # of random disks\nminsep::Real = 8 minimum disk separation in mm\nmaxtry::Int = 500 give up on adding more disks if this is reached\nwarn::Bool = false warn if maxtry reached?\nseed::Int = 0 if nonzero then use this seed\n\nThe function options can be replaced with rand() for other Distributions.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.ellipse_parameters","page":"Methods","title":"ImagePhantoms.ellipse_parameters","text":"params = ellipse_parameters(case::Symbol; fovs::NTuple{2}, u::Tuple)\n\nBy default the first four columns are unitless \"fractions of field of view\", so columns 1,3 are scaled by xfov and columns 2,4 are scaled by yfov, where (xfov, yfov) = fovs. The optional 3-tuple u specifies scaling and/or units:\n\ncolumns 1-4 (center, radii) are scaled by u[1] (e.g., mm),\ncolumn 5 (angle) is scaled by u[2] (e.g., 1 or °),\ncolumn 6 (value) is scaled by u[3] (e.g., 1/cm) for an attenuation map.\n\n\n\n\n\n","category":"function"},{"location":"methods/#ImagePhantoms.ellipse_parameters-Tuple{SouthPark}","page":"Methods","title":"ImagePhantoms.ellipse_parameters","text":"params = ellipse_parameters(SouthPark() ; fovs::NTuple{2,Number} = (100,100))\n\nEllipse parameters for \"South Park\" phantom.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.fwhm2sigma-Tuple{Any}","page":"Methods","title":"ImagePhantoms.fwhm2sigma","text":"σ = fwhm2sigma(w)\n\nConvert FWHM w to equivalent Gaussian σ for exp(-π (xσ)^2).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.jinc-Tuple{X} where X<:Real","page":"Methods","title":"ImagePhantoms.jinc","text":"jinc(x)\n\nReturn jinc(x) = J1(π*x)/(2x), where J1 is a Bessel function of the first kind.\n\nThe argument x must be unitless.\n\nReturn type is promote_type(typeof(x), Float32).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, Array{var\"#s29\", N} where {var\"#s29\"<:(Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}), N}}","page":"Methods","title":"ImagePhantoms.phantom","text":"image = phantom(x, y, oa::Array{<:Object2d})\n\nReturn a digital image of the phantom sampled at (x,y) locations.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, Array{var\"#s7\", N} where {var\"#s7\"<:(Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}), N}, Int64}","page":"Methods","title":"ImagePhantoms.phantom","text":"image = phantom(x, y, oa::Array{<:Object2d}, oversample::Int; T)\n\nReturn a digital image of the phantom sampled at (x,y) locations, with over-sampling factor oversample and element type T.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Array{var\"#s29\", N} where {var\"#s29\"<:(Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}), N}}","page":"Methods","title":"ImagePhantoms.phantom","text":"image = phantom(oa::Array{<:Object2d})::Function\n\nReturn function image(x,y) that user can sample at any (x,y) locations to make a phantom image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Object2d{Ellipse, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.phantom","text":"phantom(ob::Object2d{Ellipse})\n\nReturns function of (x,y) for making image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Object2d{Gauss2, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.phantom","text":"phantom(ob::Object2d{Gauss2})\n\nReturns function of (x,y) for making image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.phantom-Tuple{Object2d{Rect, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.phantom","text":"phantom(ob::Object2d{Rect})\n\nReturns function of (x,y) for making image.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, Array{var\"#s29\", N} where {var\"#s29\"<:(Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}), N}}","page":"Methods","title":"ImagePhantoms.radon","text":"sino = radon(r, ϕ, oa::Array{<:Object2d})\n\nReturn parallel-beam 2D sinogram sino sampled at given (r,ϕ) locations.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Array{var\"#s29\", N} where {var\"#s29\"<:(Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}), N}}","page":"Methods","title":"ImagePhantoms.radon","text":"sino = radon(oa::Array{<:Object2d})::Function\n\nReturn function sino(r,ϕ) that user can sample at any (r,ϕ) locations to make a phantom 2D sinogram.\n\nThe coordinate system used here is such that ϕ=0 corresponds to line integrals along the y axis for an object f(xy). Then as ϕ increases, the line integrals rotate counter-clockwise.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Object2d{Ellipse, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.radon","text":"radon(ob::Object2d{Ellipse})\n\nReturns function of (r,ϕ) for making a sinogram.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Object2d{Gauss2, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.radon","text":"radon(ob::Object2d{Gauss2})\n\nReturns function of (r,ϕ) for making a sinogram.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon-Tuple{Object2d{Rect, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.radon","text":"radon(ob::Object2d{Rect})\n\nReturns function of (r,ϕ) for making a sinogram.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon_ellipse-NTuple{7, Any}","page":"Methods","title":"ImagePhantoms.radon_ellipse","text":"radon_ellipse(r, ϕ, cx, cy, rx, ry, θ)\n\nRadon transform of ellipse at point (r,ϕ).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon_gauss2-NTuple{7, Any}","page":"Methods","title":"ImagePhantoms.radon_gauss2","text":"radon_gauss2(r, ϕ, cx, cy, wx, wy, θ)\n\nRadon transform at (r,ϕ) of 2D Gaussian.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.radon_rect-NTuple{7, Any}","page":"Methods","title":"ImagePhantoms.radon_rect","text":"radon_rect(r, ϕ, cx, cy, wx, wy, θ)\n\nRadon transform at (r,ϕ) of rectangle (involves a trapezoid).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.rotate-Tuple{Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}, Number}","page":"Methods","title":"ImagePhantoms.rotate","text":"rotate(ob::Object2d, θ::RealU)\n\nIn-plane rotation of a 2D object.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.rotate-Tuple{Object3d{S, V, W, C, A, P} where {S, V, W, C, A, P}, Tuple{Number, Number}}","page":"Methods","title":"ImagePhantoms.rotate","text":"rotate(ob::Object3d, (α,β))\nrotate(ob::Object3d, α, β=0)\n\nRotation of a 3D object.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.scale-Union{Tuple{W}, Tuple{V}, Tuple{D}, Tuple{S}, Tuple{Object{S, D, V, W, C, A, P} where {C, A, P}, Tuple{Vararg{Number, W}}}} where {S, D, V, W}","page":"Methods","title":"ImagePhantoms.scale","text":"scale(ob::Object, factor::RealU)\nscale(ob::Object, factor::NTuple{W,RealU})\n\nScale the width(s) by factor.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.shepp_logan","page":"Methods","title":"ImagePhantoms.shepp_logan","text":"image = shepp_logan(M, [N,], case, options...)\n\nConvenience method for generating M×N samples of Shepp-Logan phantoms.\n\nIn\n\nM::Int : horizontal size\nN::Int : vertical size, defaults to M\ncase::EllipsePhantomVersion = SheppLogan()\n\nOptions\n\noversample::Int = 3 (usually)\nyflip::Bool = true (reverse y samples for convenience.)\nkwargs... remaining options passed to ellipse_parameters for parameters.\n\nOut\n\nimage : M × N matrix\n\nThe default here is 3× over-sampling along both axes (9 samples per pixel), except for the SheppLoganBrainWeb phantom that consists of integer indices.\n\n\n\n\n\n","category":"function"},{"location":"methods/#ImagePhantoms.shepp_logan_values-Tuple{SheppLogan}","page":"Methods","title":"ImagePhantoms.shepp_logan_values","text":"values = shepp_logan_values(::EllipsePhantomVersion)\n\nReturn 10 Shepp-Logan ellipse amplitudes for various versions.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, Array{var\"#s29\", N} where {var\"#s29\"<:(Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}), N}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"kspace = spectrum(fx, fy, oa::Array{<:Object2d})::Function\n\nReturn k-space matrix kspace sampled at given (fx,fy) locations.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Array{var\"#s29\", N} where {var\"#s29\"<:(Object2d{S, V, W, C, A, P} where {S, V, W, C, A, P}), N}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"kspace = spectrum(oa::Array{<:Object2d})::Function\n\nReturn function kspace(fx,fy) that user can sample at any (fx,fy) locations to make phantom 2D k-space data.\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d{Ellipse, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d{Ellipse})\n\nReturns function of (f_xf_y) for the spectrum (2D Fourier transform).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d{Gauss2, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d{Gauss2})\n\nReturns function of (f_xf_y) for the spectrum (2D Fourier transform).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.spectrum-Tuple{Object2d{Rect, V, W, C, A, P} where {V, W, C, A, P}}","page":"Methods","title":"ImagePhantoms.spectrum","text":"spectrum(ob::Object2d{Rect})\n\nReturns function of (f_xf_y) for the spectrum (2D Fourier transform).\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.translate-Union{Tuple{D}, Tuple{S}, Tuple{Object{S, D, V, W, C, A, P} where {V, W, C, A, P}, Tuple{Vararg{Number, D}}}} where {S, D}","page":"Methods","title":"ImagePhantoms.translate","text":"translate(ob::Object, shift::NTuple{D,RealU})\ntranslate(ob::Object2d, xshift, yshift)\ntranslate(ob::Object3d, xshift, yshift, zshift)\n\nTranslate the center coordinates of an object by shift\n\n\n\n\n\n","category":"method"},{"location":"methods/#ImagePhantoms.trapezoid-NTuple{5, Number}","page":"Methods","title":"ImagePhantoms.trapezoid","text":"trapezoid(t::RealU, t1, t2, t3, t4)\n\nUnit-height trapezoid with breakpoints t1, t2, t3, t4.\n\n\n\n\n\n","category":"method"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/master/docs/lit/examples/1-overview.jl\"","category":"page"},{"location":"examples/1-overview/#overview","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"","category":"section"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"This page explains the Julia package ImagePhantoms.","category":"page"},{"location":"examples/1-overview/#Setup","page":"ImagePhantoms overview","title":"Setup","text":"","category":"section"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"Packages needed here.","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"using ImagePhantoms\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt\nusing UnitfulRecipes\nusing Unitful: mm\n#using Plots: scatter, plot!, default; default(markerstrokecolor=:auto)","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"examples/1-overview/#Overview","page":"ImagePhantoms overview","title":"Overview","text":"","category":"section"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"When developing image reconstruction methods, it can be helpful to simulate data (e.g., sinograms) using software-defined images called phantoms.","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"The simplest method here is to make a Shepp-Logan phantom image similar its use in other packages.","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"image = shepp_logan(256) # CT version by default\njim(image, \"SheppLogan\", clim=(0.9, 1.1), yflip=false)","category":"page"},{"location":"examples/1-overview/#Sinograms-and-spectra","page":"ImagePhantoms overview","title":"Sinograms and spectra","text":"","category":"section"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"Often for image reconstruction algorithm development, we need not only the phantom image, but also its sinogram and spectrum. We start with the vector of ellipses that defines the phantom, using a typical field of view (FOV) of 200mm for a head:","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"objects = shepp_logan(SheppLoganToft(); fovs=(200mm,200mm))","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"From that collection we can compute images, sinograms and spectra. It is convenient (but not required) to use ImageGeoms to help with the sampling.","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"ig = ImageGeom(dims=(200,256), deltas=(1mm,1mm))\nimage = phantom(axes(ig)..., objects)\njim(axes(ig)..., image, xlabel=\"x\", ylabel=\"y\", title=\"SheppLoganToft\")","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"Here is the sinogram corresponding to this phantom, computed analytically from the ellipse parameters:","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"r = LinRange(-100mm,100mm,401)\nϕ = deg2rad.(0:180)\nsino = radon(r, ϕ, objects)\njim(r, ϕ, sino, title=\"Sinogram\", yflip=false, aspect_ratio=:none)","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"Here is the 2D spectrum (Fourier transform) of this phantom, computed analytically from the ellipse parameters:","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"kspace = spectrum(axesf(ig)..., objects)\njim(axesf(ig)..., log10.(abs.(kspace/(1mm)^2)), xlabel=\"ν₁\", ylabel=\"ν₂\", title=\"log10|Spectrum|\")","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"","category":"page"},{"location":"examples/1-overview/","page":"ImagePhantoms overview","title":"ImagePhantoms overview","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"EditURL = \"https://github.com/JuliaImageRecon/ImagePhantoms.jl/blob/master/docs/lit/examples/2-ellipse.jl\"","category":"page"},{"location":"examples/2-ellipse/#ellipse","page":"Ellipse","title":"Ellipse","text":"","category":"section"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"This page illustrates the Ellipse shape in the Julia package ImagePhantoms.","category":"page"},{"location":"examples/2-ellipse/#Setup","page":"Ellipse","title":"Setup","text":"","category":"section"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Packages needed here.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"using ImagePhantoms: Ellipse, phantom, radon, spectrum\nusing ImageGeoms: ImageGeom, axesf\nusing MIRTjim: jim, prompt\nusing FFTW: fft, fftshift\nusing Unitful: mm, unit\nusing UnitfulRecipes\nusing Plots: plot, plot!, scatter!, default; default(markerstrokecolor=:auto)","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"The following line is helpful when running this example.jl file as a script; this way it will prompt user to hit a key after each figure is displayed.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"isinteractive() ? jim(:prompt, true) : prompt(:draw);\nnothing #hide","category":"page"},{"location":"examples/2-ellipse/#Overview","page":"Ellipse","title":"Overview","text":"","category":"section"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"One of the most basic shapes used in constructing 2D digital image phantoms is the ellipse, specified by its center, radii, angle and value. All of the methods in ImagePhantoms support physical units, so we use such units throughout this example. (Using units is recommended but not required.)","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Define an ellipse object, using physical units.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"width = (2mm, 8mm)\nob = Ellipse((4mm, 3mm), width, π/6, 1.0f0)","category":"page"},{"location":"examples/2-ellipse/#Phantom-image-using-phantom","page":"Ellipse","title":"Phantom image using phantom","text":"","category":"section"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Make a digital image of it using phantom and display it.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"dx = 0.02mm\ndy = 0.025mm\n(M,N) = (2^10,2^10+2)\nx = (-M÷2:M÷2-1) * dx\ny = (-N÷2:N÷2-1) * dy\nimg = phantom(x, y, [ob])\njim(x, y, img)","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Hereafter we use ImageGeoms to simplify the indexing.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"ig = ImageGeom(dims=(M,N), deltas=(dx,dy), offsets=(0.5,0.5))\n@assert all(axes(ig) .≈ (x,y))\np1 = jim(axes(ig)..., img, \"Ellipse phantom\", xlabel=\"x\", ylabel=\"y\")","category":"page"},{"location":"examples/2-ellipse/#Spectrum-using-spectrum","page":"Ellipse","title":"Spectrum using spectrum","text":"","category":"section"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Let's examine the spectrum of this image. There are two ways to do this:","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"using the analytical Fourier transform of the ellipse via spectrum\napplying the DFT via FFT to the digital image.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Because the shape has units mm, the spectra axes have units cycles/mm.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"zscale = 4 / π / prod(width) # normalize spectra by area\nspectrum_exact = spectrum(axesf(ig)..., [ob]) * zscale\nsp = z -> max(log10(abs(z)/oneunit(abs(z))), -6) # log-scale for display\nclim = (-6, 0) # colorbar limit for display\n(xlabel, ylabel) = (\"ν₁\", \"ν₂\")\np2 = jim(axesf(ig)..., sp.(spectrum_exact), \"log10|Spectrum|\"; clim, xlabel, ylabel)","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Sadly fft cannot handle units currently, so this function is a work-around:","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"function myfft(x)\n    u = unit(eltype(x))\n    return fftshift(fft(fftshift(x) / u)) * u\nend","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"fx = (-M÷2:M÷2-1) / M / dx # appropriate frequency axes for DFT, fy = (-N÷2:N÷2-1) / N / dy # that are provided by axesf(ig)","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"spectrum_fft = myfft(img) * dx * dy * zscale\np3 = jim(axesf(ig)..., sp.(spectrum_fft), \"log10|DFT|\"; clim, xlabel, ylabel)","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Compare the DFT and analytical spectra to validate the code","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"@assert maximum(abs, spectrum_exact - spectrum_fft) /\n        maximum(abs, spectrum_exact) < 2e-2\np4 = jim(axesf(ig)..., abs.(spectrum_fft - spectrum_exact), \"Difference\"; xlabel, ylabel)\njim(p1, p4, p2, p3)","category":"page"},{"location":"examples/2-ellipse/#Radon-transform-using-radon","page":"Ellipse","title":"Radon transform using radon","text":"","category":"section"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Examine the Radon transform of the ellipse using radon, and validate it using the projection-slice theorem aka Fourier-slice theorem.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"dr = 0.02mm # radial sample spacing\nnr = 2^10 # radial sinogram bins\nr = (-nr÷2:nr÷2-1) * dr # radial samples\nfr = (-nr÷2:nr÷2-1) / nr / dr # corresponding spectral axis\nϕ = deg2rad.(0:180) # * Unitful.rad # todo round unitful Unitful.°\nsino = radon(ob).(r, ϕ') # sample Radon transform of a single shape object\np5 = jim(r, rad2deg.(ϕ), sino; aspect_ratio=:none, title=\"sinogram\", yflip=false, xlabel=\"r\", ylabel=\"ϕ\")","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Note that the maximum sinogram value is about 16mm which makes sense for an ellipse whose long axis has \"radius\" 8mm.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"The above sampling generated a parallel-beam sinogram, but one could make a fan-beam sinogram simply by sampling (r, ϕ) appropriately.","category":"page"},{"location":"examples/2-ellipse/#Fourier-slice-theorem-illustration","page":"Ellipse","title":"Fourier-slice theorem illustration","text":"","category":"section"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"Pick one particular view angle (55°) and look at its slice and spectra.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"ia = argmin(abs.(ϕ .- deg2rad(55)))\nslice = sino[:,ia]\nslice_fft = myfft(slice) * dr\nangle = round(rad2deg(ϕ[ia]), digits=1)\n\nkx, ky = (fr * cos(ϕ[ia]), fr * sin(ϕ[ia])) # Fourier-slice theorem\nslice_ft = spectrum(ob).(kx, ky)\n@assert maximum(abs, slice_ft - slice_fft) / maximum(abs, slice_ft) < 2e-4\n\np3 = plot(r, slice, title=\"profile at ϕ = $angle\", label=\"\")\np4 = plot(title=\"1D spectra\")\nscatter!(fr, abs.(slice_fft), label=\"abs fft\", color=:blue)\nscatter!(fr, real(slice_fft), label=\"real fft\", color=:green)\nscatter!(fr, imag(slice_fft), label=\"imag fft\", color=:red, xlims=(-1,1).*(1.0/mm))\n\nplot!(fr, abs.(slice_ft), label=\"abs\", color=:blue)\nplot!(fr, real(slice_ft), label=\"real\", color=:green)\nplot!(fr, imag(slice_ft), label=\"imag\", color=:red)\nplot(p1, p5, p3, p4)","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"The good agreement between the analytical spectra (solid lines) and the DFT samples (disks) validates that phantom, radon, and spectrum are all self consistent for this Ellipse object.","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"","category":"page"},{"location":"examples/2-ellipse/","page":"Ellipse","title":"Ellipse","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ImagePhantoms","category":"page"},{"location":"#ImagePhantoms.jl-Documentation","page":"Home","title":"ImagePhantoms.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package provides tools for constructing digital software \"phantoms\" used for testing image reconstruction algorithms. The most famous such phantom is the \"Shepp Logan\" phantom from this 1974 paper. (A variant of that phantom serves as the logo for the JuliaImageRecon suite of tools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A phantom is a collection (iterable) of shapes (e.g., ellipses, rectangles). This package allows the shapes to be described with physical units, e.g., using Unitful.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The shapes in this package have methods useful for simulating data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"phantom returns a function of (x,y) or (x,y,z)  that one can evaluate on a grid to make a pixelated or voxelized phantom.\nradon returns a function of (r,ϕ)  that one can evaluate on a grid  to make a sampled 2D parallel-beam sinogram,  or evaluate appropriately to make a sampled fan-beam sinogram.\nspectrum returns a function of spatial frequencies that one can sample to simulate k-space data (e.g., in MRI).","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the Examples tab to the left for details.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Michigan Image Reconstruction Toolbox (MIRT) currently has an older interface ellipse_im, rect_im, etc., similar to the functions of the same name in the Matlab version of MIRT provided for backward compatibility. Using ImagePhantoms is recommended for Julia work.","category":"page"}]
}
